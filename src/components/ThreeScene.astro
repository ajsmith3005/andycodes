---
 
---

<canvas id="canvas"></canvas>

<script>
import * as THREE from 'three';

const canvas = document.getElementById('canvas');
const body = document.querySelector('body');

function clamp(value: number, min: number, max: number) {
  return Math.min(Math.max(value, min), max);
}

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera( clamp(75 * (1300 / body.offsetWidth), 75, 110), window.innerWidth / body.clientHeight, 0.1, 1000 );
THREE.ColorManagement.enabled = false;

const renderer = new THREE.WebGLRenderer( {
  canvas: canvas,
  antialias: true
} );
renderer.setSize( body.offsetWidth, body.offsetHeight );
renderer.setAnimationLoop( animate );
camera.updateProjectionMatrix();

const textureArray = Array(
  new THREE.TextureLoader().load('filled-dot.svg'),
  new THREE.TextureLoader().load('outlined-dot.svg'),
  new THREE.TextureLoader().load('nested-dot.svg'),
);

const colorArray = Array(
  0x2f2f2e,
  0x2f2f2e,
  0x2f2f2e,
  0x22484e
)

function randomTexture() {
  let texture = textureArray[Math.floor(Math.random() * textureArray.length)];
  return texture;
}

function randomColor() {
  let color = colorArray[Math.floor(Math.random() * colorArray.length)];
  return color;
}

function addDot() {
  const geometry = new THREE.TorusGeometry( 1, 0.15, 2, 32 )
  const geometry2 = new THREE.CircleGeometry( .3, 16 )
  // new THREE.CircleGeometry( 1
  // , 256 );
  const material = new THREE.MeshStandardMaterial( 
    { 
    // map: randomTexture(),
    // transparent: true,
    // opacity: 0.8,
    // reflectivity: 1,
    color: randomColor(),
    // roughness: 0.3,
    // emissive: 0x000000,
    // metalness: 0.7
  } );
  const dot = new THREE.Mesh( geometry, material );
  const dot2 = new THREE.Mesh( geometry2, material );

  const x = THREE.MathUtils.randFloatSpread( 150 );
  const y = THREE.MathUtils.randFloatSpread( 600 );
  const z = THREE.MathUtils.randFloat( -50, 22 );

  dot.position.set(x, y, z);
  dot2.position.set(x, y, z);
  scene.add( dot, dot2 );
  
}

Array(800).fill().forEach(addDot);

const light = new THREE.AmbientLight( 0xffffff, 0.5 );
// const pointlight = new THREE.PointLight( 0xffffff,1 );
// pointlight.position.set( 10, 20, 90 );
scene.add( light );
// const lightHelper = new THREE.PointLightHelper(pointlight, 1);
// scene.add(lightHelper);

const backgroundColor = getComputedStyle(document.documentElement).getPropertyValue('--color-background');
scene.background = new THREE.Color(backgroundColor);

camera.position.z = 100;

let oldy = 0;
let cameraY = 0;
let scrollSpeed = .02;

window.onscroll = function(e) {
  let changey = window.scrollY - oldy;
  cameraY += changey * scrollSpeed;
  camera.position.y = -cameraY;

  oldy = window.scrollY;
}



function animate() {
	renderer.render( scene, camera );
}

window.addEventListener('resize', () => {
  const body = document.querySelector('body');
  camera.fov = clamp(75 * (1300 / body.offsetWidth), 75, 110);
  camera.aspect = window.innerWidth / body.clientHeight;
  camera.updateProjectionMatrix();
  renderer.setSize( body.clientWidth, body.clientHeight );
});

screen.orientation.addEventListener("change", () => {
  const body = document.querySelector('body');
  camera.fov = clamp(75 * (1300 / body.offsetWidth), 75, 110);
  camera.aspect = window.innerWidth / body.clientHeight;
  camera.updateProjectionMatrix();
  renderer.setSize( body.clientWidth, body.clientHeight );
});

</script>

<style>
 #canvas {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: -1;
 }
</style>