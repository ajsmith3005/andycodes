---
 
---

<canvas id="canvas" class="indicator"></canvas>

<script>
import * as THREE from 'three';
import {OrbitControls} from 'three/addons';

const canvas = document.getElementById('canvas');
const body = document.querySelector('body');

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera( 75, body.offsetWidth / body.offsetHeight, 0.1, 1000 );

const renderer = new THREE.WebGLRenderer( {
  canvas: canvas,
  antialias: true
} );
renderer.setSize( body.offsetWidth, body.offsetHeight );
renderer.setAnimationLoop( animate );

const geometry = new THREE.BoxGeometry( 1, 1, 1 );
const material = new THREE.MeshLambertMaterial( { 
  color: '#4fd5dd', 
  emissive: '#4fd5dd',
  transparent: true,
  opacity: 0.2 
} );
const cube = new THREE.Mesh( geometry, material );
scene.add( cube );



const textureArray = Array(
  new THREE.TextureLoader().load('filled-dot.svg'),
  new THREE.TextureLoader().load('outlined-dot.svg'),
  new THREE.TextureLoader().load('nested-dot.svg'),
  new THREE.TextureLoader().load('filled-dot-dark.svg'),
  new THREE.TextureLoader().load('outlined-dot-dark.svg'),
  new THREE.TextureLoader().load('nested-dot-dark.svg'),
  
  );

function randomTexture() {
  let texture = textureArray[Math.floor(Math.random() * textureArray.length)];
  return texture;
}

function addDot() {
  const geometry = new THREE.CircleGeometry( 0.1, 36 );
  const material = new THREE.MeshStandardMaterial( { 
    map: randomTexture(),
    transparent: true,
    // emissive: '#4fd5dd',
  } );
  const dot = new THREE.Mesh( geometry, material );

  // const [x, y] = Array(2).fill().map(() => THREE.MathUtils.randFloatSpread( 30 ));
  const x = THREE.MathUtils.randFloatSpread( 30 );
  const y = THREE.MathUtils.randFloatSpread( 40 );
  const z = THREE.MathUtils.randFloat( -5, 5 );

  dot.position.set(x, y, z);
  scene.add( dot );
}

Array(10000).fill().forEach(addDot);

const light = new THREE.AmbientLight( 0xffffff, .4 )
scene.add( light );

const backgroundColor = getComputedStyle(document.documentElement).getPropertyValue('--color-background');
scene.background = new THREE.Color(backgroundColor);

camera.position.z = 10;

function animate() {

	cube.rotation.x += 0.01;
	cube.rotation.y += 0.01;

	renderer.render( scene, camera );

}

window.addEventListener('resize', () => {
  camera.aspect = body.offsetWidth / body.offsetHeight;
  camera.updateProjectionMatrix();
  renderer.setSize( window.innerWidth, body.offsetHeight );
});

</script>

<style>
 #canvas {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: -1;
 }
</style>